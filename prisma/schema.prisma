generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  username          String          @unique
  email             String          @unique
  password          String
  phone             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  role              String?
  isAdmin           Boolean         @default(false)
  isVerify          Boolean         @default(false)
  verificationToken String?
  profile           Profile?
  team              TeamMember[]
  project           ProjectMember[]
  assignedTasks     Tasks[]         @relation("AssignedTasks")
  authoredTasks     Tasks[]         @relation("AuthoredTasks")
  history           TaskHistory[]
  taskListId        String?         @db.ObjectId
  taskList          TaskList[]
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  bio         String?
  dateOfBirth DateTime?
  avatar      String?   @default("../assets/images/avatars/cat.jpg")
  user        User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Team {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  bio         String?
  address     String?
  phonenumber String?
  email       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  avatar      String?      @default("../assets/images/avatars/cat.jpg")
  member      TeamMember[]
}

model TeamMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String   @db.ObjectId
  joinedAt    DateTime @default(now())
  role        String?
  roleCode    String?
  roleName    String?
  roleEngName String?
  permission  String?
}

model Project {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  createdAt     DateTime        @default(now())
  timeworking   String?
  permission    Json?
  member        ProjectMember[]
  tasks         Tasks[]
  avatar        String?         @default("../assets/images/avatars/cat.jpg")
  deadline      DateTime        @default(now())
  totalEstimate String?
}

model ProjectMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  project     Project  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String   @db.ObjectId
  joinedAt    DateTime @default(now())
  role        String?
  roleCode    String?
  roleName    String?
  roleEngName String?
  permission  String?
}

model Tasks {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  body           String
  status         String
  statusColor    String
  statusName     String
  createdAt      DateTime      @default(now())
  estimatetime   String?
  updatedAt      DateTime      @updatedAt
  isExpiration   Boolean       @default(false)
  expirationDate DateTime
  images         String[]
  tags           String[]
  projectId      String?       @db.ObjectId
  project        Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team           String?
  type           String?
  history        TaskHistory[]
  priority       String?
  priorityName   String?
  progress       Float?
  employeeId     String?       @db.ObjectId
  employee       User?         @relation("AssignedTasks", fields: [employeeId], references: [id])
  authorId       String?       @db.ObjectId
  author         User?         @relation("AuthoredTasks", fields: [authorId], references: [id])
  sprintId       String?       @db.ObjectId
  sprint         Sprint?       @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  taskListId     String?       @db.ObjectId
  taskList       TaskList?     @relation(fields: [taskListId], references: [id], onDelete: Cascade)
}

model TaskHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  action    String
  changes   Json
  createdAt DateTime @default(now())
  task      Tasks?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String?  @db.ObjectId
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model TaskList {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  avatar      String?  @default("../assets/images/avatars/cat.jpg")
  tasks       Tasks[]
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Sprint {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  effectiveDate DateTime
  expiryDate    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tasks         Tasks[]
}
